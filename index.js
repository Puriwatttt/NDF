import { 
  Client, GatewayIntentBits, REST, Routes, PermissionFlagsBits, EmbedBuilder 
} from "discord.js";
import mqtt from "mqtt";
import fs from "fs";
import dotenv from "dotenv";
import { DateTime } from "luxon";

dotenv.config();

// ===== CONFIG =====
const token = process.env.DISCORD_TOKEN;
const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID;

const mqttServer = process.env.MQTT_SERVER;
const mqttUser = process.env.MQTT_USER;
const mqttPass = process.env.MQTT_PASS;

const topicTemp = "aiot/namuen/temp";
const topicHum = "aiot/namuen/hum";

// ===== ‡πÇ‡∏´‡∏•‡∏î/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Config =====
const configFile = "./config.json";
let config = { logChannelId: null, alertChannelId: null, tempThreshold: 30 };

if (fs.existsSync(configFile)) {
  try {
    const fileData = fs.readFileSync(configFile, "utf8");
    if (fileData.trim() !== "") {
      config = JSON.parse(fileData);
    } else {
      fs.writeFileSync(configFile, JSON.stringify(config, null, 2));
    }
  } catch (err) {
    console.error("‚ùå config.json ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...");
    fs.writeFileSync(configFile, JSON.stringify(config, null, 2));
  }
} else {
  fs.writeFileSync(configFile, JSON.stringify(config, null, 2));
}

function saveConfig() {
  fs.writeFileSync(configFile, JSON.stringify(config, null, 2));
}

// ===== Discord Client =====
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages] });

// ===== Slash Commands =====
const commands = [
  { name: "status", description: "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" },
  { name: "setlogchannel", description: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log", default_member_permissions: PermissionFlagsBits.Administrator.toString() },
  { name: "setalertchannel", description: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô", default_member_permissions: PermissionFlagsBits.Administrator.toString() },
  { 
    name: "setthreshold", 
    description: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
    options: [{ name: "temperature", description: "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)", type: 4, required: true }],
    default_member_permissions: PermissionFlagsBits.Administrator.toString(),
  }
];

const rest = new REST({ version: "10" }).setToken(token);

(async () => {
  try {
    console.log("‚è≥ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Slash Commands...");
    await rest.put(Routes.applicationGuildCommands(clientId, guildId), { body: commands });
    console.log("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Slash Commands ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
  } catch (error) {
    console.error(error);
  }
})();

// ===== MQTT Connect =====
const mqttClient = mqtt.connect(mqttServer, { username: mqttUser, password: mqttPass });

let latestTemp = null;
let latestHum = null;
let lastUpdateTime = null;

let alertSent = false;       // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
let fireAlertSent = false;   // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ (10 ‡∏ô‡∏≤‡∏ó‡∏µ)
let highTempStart = null;    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô threshold
let logPending = false;      // ‡∏Å‡∏±‡∏ô log ‡∏ã‡πâ‡∏≥

mqttClient.on("connect", () => {
  console.log("‚úÖ MQTT Connected");
  mqttClient.subscribe([topicTemp, topicHum], (err) => {
    if (!err) console.log("üì° Subscribed:", topicTemp, topicHum);
  });
});

mqttClient.on("message", (topic, message) => {
  const value = parseFloat(message.toString());
  const now = DateTime.now().setZone("Asia/Bangkok");

  if (topic === topicTemp) latestTemp = value;
  if (topic === topicHum) latestHum = value;
  lastUpdateTime = now;

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô threshold
  if (config.alertChannelId && topic === topicTemp && latestTemp > config.tempThreshold) {
    const alertChannel = client.channels.cache.get(config.alertChannelId);

    if (alertChannel && !alertSent) {
      const alertEmbed = new EmbedBuilder()
        .setColor(0xff0000)
        .setTitle("üö® ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ!")
        .setDescription(`‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô **${latestTemp}¬∞C** ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ (**${config.tempThreshold}¬∞C**)`)
        .setFooter({ text: `‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${now.toLocaleString(DateTime.DATETIME_MED)}` });
      alertChannel.send({ embeds: [alertEmbed] });
      alertSent = true;
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
    if (!highTempStart) {
      highTempStart = now;
    } else {
      const diffMinutes = now.diff(highTempStart, "minutes").minutes;
      if (diffMinutes >= 10 && !fireAlertSent) {
        const fireEmbed = new EmbedBuilder()
          .setColor(0xff6600)
          .setTitle("üî• ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ!")
          .setDescription(`‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏Å‡∏¥‡∏ô ${config.tempThreshold}¬∞C ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô **10 ‡∏ô‡∏≤‡∏ó‡∏µ**\n‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!`)
          .setFooter({ text: `‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${now.toLocaleString(DateTime.DATETIME_MED)}` });
        alertChannel.send({ embeds: [fireEmbed] });
        fireAlertSent = true;
      }
    }
  }

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö threshold
  if (topic === topicTemp && latestTemp <= config.tempThreshold) {
    alertSent = false;
    fireAlertSent = false;
    highTempStart = null;
  }

  // ‡∏™‡πà‡∏á log ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥ ‡∏£‡∏ß‡∏° temp+hum (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ logChannel ‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ)
  if (config.logChannelId && !logPending) {
    logPending = true;

    setTimeout(() => {
      if (latestTemp !== null || latestHum !== null) {
        const logChannel = client.channels.cache.get(config.logChannelId);
        if (logChannel) {
          const logEmbed = new EmbedBuilder()
            .setColor(0x3498db)
            .setTitle("üì° Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32")
            .addFields(
              { name: "üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", value: latestTemp !== null ? `${latestTemp} ¬∞C` : "-", inline: true },
              { name: "üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", value: latestHum !== null ? `${latestHum} %` : "-", inline: true },
            )
            .setFooter({ text: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${now.toLocaleString(DateTime.DATETIME_MED)}` });

          logChannel.send({ embeds: [logEmbed] });
        }
      }
      logPending = false;
    }, 1000);
  }
});

// ===== Discord Event =====
client.on("ready", () => {
  console.log(`‚úÖ ‡∏ö‡∏≠‡∏ó‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô: ${client.user.tag}`);
});

client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  if (interaction.commandName === "status") {
    if (latestTemp === null || latestHum === null) {
      await interaction.reply("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32");
    } else {
      const embed = new EmbedBuilder()
        .setColor(0x2ecc71)
        .setTitle("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        .addFields(
          { name: "üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", value: `${latestTemp} ¬∞C`, inline: true },
          { name: "üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", value: `${latestHum} %`, inline: true },
        )
        .setFooter({ text: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${lastUpdateTime.toLocaleString(DateTime.DATETIME_MED)}` });
      await interaction.reply({ embeds: [embed] });
    }
  }

  if (interaction.commandName === "setlogchannel") {
    config.logChannelId = interaction.channelId;
    saveConfig();
    await interaction.reply(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á **Log** ‡πÄ‡∏õ‡πá‡∏ô <#${interaction.channelId}> ‡πÅ‡∏•‡πâ‡∏ß`);
  }

  if (interaction.commandName === "setalertchannel") {
    config.alertChannelId = interaction.channelId;
    saveConfig();
    await interaction.reply(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á **Alert** ‡πÄ‡∏õ‡πá‡∏ô <#${interaction.channelId}> ‡πÅ‡∏•‡πâ‡∏ß`);
  }

  if (interaction.commandName === "setthreshold") {
    const newThreshold = interaction.options.getInteger("temperature");
    config.tempThreshold = newThreshold;
    saveConfig();
    await interaction.reply(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏õ‡πá‡∏ô **${newThreshold}¬∞C** ‡πÅ‡∏•‡πâ‡∏ß`);
  }
});

// ===== Login Bot =====
client.login(token);
